     1                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
     2                                  ;Author information
     3                                  ;  Author name: Sina Amini	
     4                                  ;  Author email: sinamindev@gmail.com
     5 
    10                                  ;Project information
    11                                  ;  Title: Electric Circuits in Parallel
    12                                  ;  Purpose: To experience vector processing by using the AVX component
    13                                  ;  Status: No known errors
    14                                  ;  Files: electric-circuits-driver.cpp, electric-circuits.asm
    15                                  ;Module information
    16                                  ;  This module's call name: electric_circuits
    17                                  ;  Language: X86-64
    18                                  ;  Syntax: Intel
    19                                  ;  Date last modified: 2014-Sep-4
    20                                  ;  Purpose: This module will read and analyze the voltage and power consumption of 4 devices in a direct current circuit configured in parallel  
    21                                  ;  File name: electric-circuits.asm
    22                                  ;  Status: This module functions as expected.
    23                                  ;  Future enhancements: None planned
    24                                  ;Translator information
    25                                  ;  Linux: nasm -f elf64 -l electric-circuits.lis -o electric-circuits.o electric-circuits.asm
    26                                  ;References and credits
    27                                  ;  Seyfarth
    28                                  ;  Professor Holliday public domain programs
    29                                  ;Format information
    30                                  ;  Page width: 172 columns
    31                                  ;  Begin comments: 61
    32                                  ;  Optimal print specification: Landscape, 7 points or smaller, monospace, 8Â½x11 paper
    33                                  ;
    34                                  ;===== Begin code area ====================================================================================================================================================
    35                                  extern printf                                               ;External C++ function for writing to standard output device
    36                                  
    37                                  extern scanf                                                ;External C++ function for reading from the standard input device
    38                                  
    39                                  global electric_circuits                                    ;This makes electric_circuits callable by functions outside of this file.
    40                                  
    41                                  segment .data                                               ;Place initialized data here
    42                                  
    43                                  ;===== Declare some messages ==============================================================================================================================================
    44                                  
    45 00000000 546869732070726F67-     initialmessage db "This program will help analyze direct current circuits configured in parallel. ", 10, 0
    46 00000009 72616D2077696C6C20-
    47 00000012 68656C7020616E616C-
    48 0000001B 797A65206469726563-
    49 00000024 742063757272656E74-
    50 0000002D 206369726375697473-
    51 00000036 20636F6E6669677572-
    52 0000003F 656420696E20706172-
    53 00000048 616C6C656C2E200A00 
    54                                  
    55 00000051 506C6561736520656E-     promptmessage0 db "Please enter the voltage of the entire circuit in volts: ", 0
    56 0000005A 746572207468652076-
    57 00000063 6F6C74616765206F66-
    58 0000006C 2074686520656E7469-
    59 00000075 726520636972637569-
    60 0000007E 7420696E20766F6C74-
    61 00000087 733A2000           
    62                                  
    63 0000008B 456E74657220746865-     promptmessage1 db "Enter the power of 4 devices (watts) separated by space and press enter: ", 0
    64 00000094 20706F776572206F66-
    65 0000009D 203420646576696365-
    66 000000A6 732028776174747329-
    67 000000AF 207365706172617465-
    68 000000B8 642062792073706163-
    69 000000C1 6520616E6420707265-
    70 000000CA 737320656E7465723A-
    71 000000D3 2000               
    72                                  
    73 000000D5 5468616E6B20796F75-     promptsuccess db "Thank you. The computations have completed with the following results ", 10, 10, 0
    74 000000DE 2E2054686520636F6D-
    75 000000E7 7075746174696F6E73-
    76 000000F0 206861766520636F6D-
    77 000000F9 706C65746564207769-
    78 00000102 74682074686520666F-
    79 0000010B 6C6C6F77696E672072-
    80 00000114 6573756C7473200A0A-
    81 0000011D 00                 
    82                                  
    83 0000011E 436972637569742074-     outputvoltage db "Circuit total voltage: %1.18lf ", 10, 0
    84 00000127 6F74616C20766F6C74-
    85 00000130 6167653A2025312E31-
    86 00000139 386C66200A00       
    87                                  
    88 0000013F 446576696365206E75-     outputdevicenum db "Device number		1			2			3			4 ",10, 0
    89 00000148 6D6265720909310909-
    90 00000151 093209090933090909-
    91 0000015A 34200A00           
    92                                  
    93 0000015E 506F77657220287761-     outputwatts db "Power (watts): %1.18lf %1.18lf %1.18lf %1.18lf",10, 0
    94 00000167 747473293A2025312E-
    95 00000170 31386C662025312E31-
    96 00000179 386C662025312E3138-
    97 00000182 6C662025312E31386C-
    98 0000018B 660A00             
    99                                  
   100 0000018E 43757272656E742028-     outputamps db "Current (amps): %1.18lf %1.18lf %1.18lf %1.18lf", 10, 10, 0
   101 00000197 616D7073293A202531-
   102 000001A0 2E31386C662025312E-
   103 000001A9 31386C662025312E31-
   104 000001B2 386C662025312E3138-
   105 000001BB 6C660A0A00         
   106                                  
   107 000001C0 546F74616C20637572-     outputampstotal db "Total current in the circuits is %1.18lf amps.", 10, 0
   108 000001C9 72656E7420696E2074-
   109 000001D2 686520636972637569-
   110 000001DB 74732069732025312E-
   111 000001E4 31386C6620616D7073-
   112 000001ED 2E0A00             
   113                                  
   114 000001F0 546F74616C20706F77-     outputwattstotal db "Total power in the circuit is %1.18lf watts.", 10,0
   115 000001F9 657220696E20746865-
   116 00000202 206369726375697420-
   117 0000020B 69732025312E31386C-
   118 00000214 662077617474732E0A-
   119 0000021D 00                 
   120                                  
   121 0000021E 546865207873617665-     xsavenotsupported.notsupportedmessage db "The xsave instruction and the xrstor instruction are not supported in this microprocessor.", 10
   122 00000227 20696E737472756374-
   123 00000230 696F6E20616E642074-
   124 00000239 686520787273746F72-
   125 00000242 20696E737472756374-
   126 0000024B 696F6E20617265206E-
   127 00000254 6F7420737570706F72-
   128 0000025D 74656420696E207468-
   129 00000266 6973206D6963726F70-
   130 0000026F 726F636573736F722E-
   131 00000278 0A                 
   132 00000279 486F77657665722C20-                                           db "However, processing will continue without backing up state component data", 10, 0
   133 00000282 70726F63657373696E-
   134 0000028B 672077696C6C20636F-
   135 00000294 6E74696E7565207769-
   136 0000029D 74686F757420626163-
   137 000002A6 6B696E672075702073-
   138 000002AF 7461746520636F6D70-
   139 000002B8 6F6E656E7420646174-
   140 000002C1 610A00             
   141                                  
   142 000002C4 54686520616E616C79-     goodbye db "The analyzer program will now return the total power to the driver. ",10, 10, 0
   143 000002CD 7A65722070726F6772-
   144 000002D6 616D2077696C6C206E-
   145 000002DF 6F772072657475726E-
   146 000002E8 2074686520746F7461-
   147 000002F1 6C20706F7765722074-
   148 000002FA 6F2074686520647269-
   149 00000303 7665722E200A0A00   
   150                                  
   151 0000030B 257300                  stringformat db "%s", 0                                     ;general string format
   152                                  
   153 0000030E 257300                  xsavenotsupported.stringformat db "%s", 0
   154                                  
   155 00000311 256C6600                eight_byte_format db "%lf", 0                               ;general 8-byte float format
   156                                  
   157 00000315 256C6620256C662025-     fourfloatformat db "%lf %lf %lf %lf", 0
   158 0000031E 6C6620256C6600     
   159                                  
   160                                  segment .bss                                                ;Place un-initialized data here.
   161                                  
   162                                  align 64                                                    ;Insure that the inext data declaration starts on a 64-byte boundar.
   163 00000000 <res 00000340>          backuparea resb 832                                         ;Create an array for backup storage having 832 bytes.
   164                                  
   165                                  ;===== Begin executable instructions here =================================================================================================================================
   166                                  
   167                                  segment .text                                               ;Place executable instructions in this segment.
   168                                  
   169                                  electric_circuits:                                          ;Entry point.  Execution begins here.
   170                                  
   171                                  ;=========== Back up all the GPRs whether used in this program or not =====================================================================================================
   172                                  
   173 00000000 55                      push       rbp                                              ;Save a copy of the stack base pointer
   174 00000001 4889E5                  mov        rbp, rsp                                         ;We do this in order to be 100% compatible with C and C++.
   175 00000004 53                      push       rbx                                              ;Back up rbx
   176 00000005 51                      push       rcx                                              ;Back up rcx
   177 00000006 52                      push       rdx                                              ;Back up rdx
   178 00000007 56                      push       rsi                                              ;Back up rsi
   179 00000008 57                      push       rdi                                              ;Back up rdi
   180 00000009 4150                    push       r8                                               ;Back up r8
   181 0000000B 4151                    push       r9                                               ;Back up r9
   182 0000000D 4152                    push       r10                                              ;Back up r10
   183 0000000F 4153                    push       r11                                              ;Back up r11
   184 00000011 4154                    push       r12                                              ;Back up r12
   185 00000013 4155                    push       r13                                              ;Back up r13
   186 00000015 4156                    push       r14                                              ;Back up r14
   187 00000017 4157                    push       r15                                              ;Back up r15
   188 00000019 9C                      pushf                                                       ;Back up rflags
   189                                  
   190                                  ;==========================================================================================================================================================================
   191                                  ;===== Begin State Component Backup =======================================================================================================================================
   192                                  ;==========================================================================================================================================================================
   193                                  
   194                                  ;=========== Before proceeding verify that this computer supports xsave and xrstor ========================================================================================
   195                                  ;Bit #26 of rcx, written rcx[26], must be 1; otherwise xsave and xrstor are not supported by this computer.
   196                                  ;Preconditions: rax holds 1.
   197 0000001A B801000000              mov        rax, 1
   198                                  
   199                                  ;Execute the cpuid instruction
   200 0000001F 0FA2                    cpuid
   201                                  
   202                                  ;Postconditions: If rcx[26]==1 then xsave is supported.  If rcx[26]==0 then xsave is not supported.
   203                                  
   204                                  ;=========== Extract bit #26 and test it ==================================================================================================================================
   205                                  
   206 00000021 4881E100000004          and        rcx, 0x0000000004000000                          ;The mask 0x0000000004000000 has a 1 in position #26.  Now rcx is either all zeros or
   207                                                                                              ;has a single 1 in position #26 and zeros everywhere else.
   208 00000028 4883F900                cmp        rcx, 0                                           ;Is (rcx == 0)?
   209 0000002C 742A                    je         xsavenotsupported                                ;Skip the section that backs up state component data.
   210                                  
   211                                  ;========== Call the function to obtain the bitmap of state components ====================================================================================================
   212                                  
   213                                  ;Preconditions
   214 0000002E B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
   215 00000033 B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
   216                                  
   217                                  ;Call the function
   218 00000038 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
   219                                  
   220                                  ;Postconditions (There are 2 of these):
   221                                  
   222                                  ;1.  edx:eax is a bit map of state components managed by xsave.  At the time this program was written (2014 June) there were exactly 3 state components.  Therefore, bits
   223                                  ;    numbered 2, 1, and 0 are important for current cpu technology.
   224                                  ;2.  ecx holds the number of bytes required to store all the data of enabled state components. [Post condition 2 is not used in this program.]
   225                                  ;This program assumes that under current technology (year 2014) there are at most three state components having a maximum combined data storage requirement of 832 bytes.
   226                                  ;Therefore, the value in ecx will be less than or equal to 832.
   227                                  
   228                                  ;Precaution: As an insurance against a future time when there will be more than 3 state components in a processor of the X86 family the state component bitmap is masked to
   229                                  ;allow only 3 state components maximum.
   230                                  
   231 0000003A 41BF07000000            mov        r15, 7                                           ;7 equals three 1 bits.
   232 00000040 4C21F8                  and        rax, r15                                         ;Bits 63-3 become zeros.
   233 00000043 41BF00000000            mov        r15, 0                                           ;0 equals 64 binary zeros.
   234 00000049 4C21FA                  and        rdx, r15                                         ;Zero out rdx.
   235                                  
   236                                  ;========== Save all the data of all three components except GPRs =========================================================================================================
   237                                  
   238                                  ;The instruction xsave will save those state components with on bits in the bitmap.  At this point edx:eax continues to hold the state component bitmap.
   239                                  
   240                                  ;Precondition: edx:eax holds the state component bit map.  This condition has been met by the two pops preceding this statement.
   241 0000004C 0FAE2425[00000000]      xsave      [backuparea]                                     ;All the data of state components managed by xsave have been written to backuparea.
   242                                  
   243 00000054 6AFF                    push qword -1                                               ;Set a flag (-1 = true) to indicate that state component data were backed up.
   244 00000056 EB20                    jmp        startapplication
   245                                  
   246                                  ;========== Show message xsave is not supported on this platform ==========================================================================================================
   247                                  xsavenotsupported:
   248                                  
   249 00000058 B800000000              mov        rax, 0
   250 0000005D 48BF-                   mov        rdi, .stringformat
   251 0000005F [0E03000000000000] 
   252 00000067 48BE-                   mov        rsi, .notsupportedmessage                        ;"The xsave instruction is not suported in this microprocessor.
   253 00000069 [1E02000000000000] 
   254 00000071 E8(00000000)            call       printf
   255                                  
   256 00000076 6A00                    push qword 0                                                ;Set a flag (0 = false) to indicate that state component data were not backed up.
   257                                  
   258                                  ;==========================================================================================================================================================================
   259                                  ;===== End of State Component Backup ======================================================================================================================================
   260                                  ;==========================================================================================================================================================================
   261                                  
   262                                  
   263                                  ;==========================================================================================================================================================================
   264                                  startapplication: ;===== Begin the application here: Electric Circuits in Parallel ========================================================================================
   265                                  ;==========================================================================================================================================================================
   266                                  
   267                                  ;==== Show the initial message ============================================================================================================================================
   268                                  
   269 00000078 B800000000              mov qword  rax, 0                                           ;No data from SSE will be printed
   270 0000007D 48BF-                   mov        rdi, stringformat                                ;"%s"
   271 0000007F [0B03000000000000] 
   272 00000087 48BE-                   mov        rsi, initialmessage                              ;"This program will help analyze direct current circuits configured in parallel. "
   273 00000089 [0000000000000000] 
   274 00000091 E8(00000000)            call       printf                                           ;Call a library function to make the output
   275                                  
   276                                  ;==== Prompt for floating point number ====================================================================================================================================
   277                                  
   278 00000096 B800000000              mov qword  rax, 0                                           ;No data from SSE will be printed
   279 0000009B 48BF-                   mov        rdi, stringformat                                ;"%s"
   280 0000009D [0B03000000000000] 
   281 000000A5 48BE-                   mov        rsi, promptmessage0                              ;"Please enter the voltage of the entire circuit in volts: "
   282 000000A7 [5100000000000000] 
   283 000000AF E8(00000000)            call       printf                                           ;Call a library function to make the output
   284                                  
   285                                  ;==== Obtain a floating point number from the standard input device and store a copy in xmm10 =============================================================================
   286                                                                              
   287 000000B4 B800000000              mov qword  rax, 0                                           ;SSE is not involved in this scanf operation
   288 000000B9 48BF-                   mov        rdi, eight_byte_format                           ;"%lf"
   289 000000BB [1103000000000000] 
   290 000000C3 4889E6                  mov        rsi, rsp                                         ;Give scanf a point to the reserved storage
   291 000000C6 E8(00000000)            call       scanf                                            ;Call a library function to do the input work
   292 000000CB 66440F102C24            movupd     xmm13, [rsp]
   293 000000D1 58                      pop        rax
   294                                  
   295                                  ;==== Prompt for 4 floating point numbers =================================================================================================================================
   296                                  
   297 000000D2 B800000000              mov qword  rax, 0                                           ;No data from SSE will be printed
   298 000000D7 48BF-                   mov        rdi, stringformat                                ;"%s"
   299 000000D9 [0B03000000000000] 
   300 000000E1 48BE-                   mov        rsi, promptmessage1                              ;"Enter the power of 4 devices (watts) separated by space and press enter: "
   301 000000E3 [8B00000000000000] 
   302 000000EB E8(00000000)            call       printf                                           ;Call a library function to make the output
   303                                  
   304                                  ;==== Scan 4 floating point numbers========================================================================================================================================
   305 000000F0 6A00                    push qword 0
   306 000000F2 6A00                    push qword 0
   307 000000F4 6A00                    push qword 0
   308 000000F6 6A00                    push qword 0
   309                                   
   310 000000F8 B800000000              mov rax, 0
   311 000000FD 48BF-                   mov rdi, fourfloatformat
   312 000000FF [1503000000000000] 
   313 00000107 4889E6                  mov rsi, rsp
   314 0000010A 4889E2                  mov rdx, rsp
   315 0000010D 4883C208                add rdx, 8
   316 00000111 4889E1                  mov rcx, rsp
   317 00000114 4883C110                add rcx, 16
   318 00000118 4989E0                  mov r8,  rsp
   319 0000011B 4983C018                add r8,  24
   320 0000011F E8(00000000)            call scanf
   321                                   
   322 00000124 C57D103C24              vmovupd ymm15, [rsp]
   323 00000129 58                      pop rax
   324 0000012A 58                      pop rax
   325 0000012B 58                      pop rax
   326 0000012C 58                      pop rax
   327                                  
   328                                  
   329                                  ;==== Output the voltage with device numbers===============================================================================================================================
   330 0000012D B800000000              mov qword  rax, 0                                           ;0 floating point numbers will be outputted
   331 00000132 48BF-                   mov        rdi, stringformat                                ;Prepare printf for string output
   332 00000134 [0B03000000000000] 
   333 0000013C 48BE-                   mov        rsi, promptsuccess                               ;"Thank you. The computations have completed with the following results" 
   334 0000013E [D500000000000000] 
   335 00000146 E8(00000000)            call       printf                                           ;Call a library function to do the hard work
   336                                  
   337 0000014B F2410F10C5              movsd 	   xmm0, xmm13
   338 00000150 B801000000              mov        rax, 1                                           ;1 floating point numbers will be outputted
   339 00000155 48BF-                   mov        rdi, outputvoltage                               ;"Circuit total voltage: %1.18lf"
   340 00000157 [1E01000000000000] 
   341 0000015F E8(00000000)            call       printf                                           ;Call a library function to do the hard work
   342                                  
   343 00000164 B800000000              mov        rax, 0                                           ;0 floating point numbers will be outputted
   344 00000169 48BF-                   mov        rdi, outputdevicenum                              ;"		1			2			3			4 "
   345 0000016B [3F01000000000000] 
   346 00000173 E8(00000000)            call       printf                                           ;Call a library function to do the hard work
   347                                  
   348                                  
   349                                  
   350                                  ;==== Move stack into xmm registers to output watts========================================================================================================================
   351 00000178 6A00                    push qword 0
   352 0000017A 6A00                    push qword 0
   353 0000017C 6A00                    push qword 0
   354 0000017E 6A00                    push qword 0
   355                                   
   356                                  
   357 00000180 C4417D10F7              vmovupd ymm14, ymm15
   358 00000185 C57D113C24              vmovupd [rsp], ymm15
   359                                  
   360 0000018A F20F100424              movsd xmm0, [rsp]
   361 0000018F 58                      pop rax
   362 00000190 F20F100C24              movsd xmm1, [rsp]
   363 00000195 58                      pop rax
   364 00000196 F20F101424              movsd xmm2, [rsp]
   365 0000019B 58                      pop rax
   366 0000019C F20F101C24              movsd xmm3, [rsp]
   367 000001A1 58                      pop rax
   368                                  
   369 000001A2 B804000000              mov rax, 4			                            ;4 floating point numbers will be outputted
   370 000001A7 48BF-                   mov rdi, outputwatts
   371 000001A9 [5E01000000000000] 
   372 000001B1 E8(00000000)            call printf						    ;Call a library function to do the hard work
   373                                  
   374                                  ;==== Move voltage onto the stack four times for division  ================================================================================================================
   375                                  
   376 000001B6 6A00                    push qword 0
   377 000001B8 6A00                    push qword 0
   378 000001BA 6A00                    push qword 0
   379 000001BC 6A00                    push qword 0
   380                                  
   381 000001BE F2440F112C24            movsd [rsp], xmm13
   382 000001C4 F2440F116C2408          movsd [rsp+8], xmm13
   383 000001CB F2440F116C2410          movsd [rsp+16], xmm13
   384 000001D2 F2440F116C2418          movsd [rsp+24], xmm13
   385                                  
   386 000001D9 C57D102C24              vmovupd ymm13, [rsp]
   387                                  
   388 000001DE C4410D5EF5              vdivpd ymm14, ymm14, ymm13
   389                                  
   390                                  ;==== Move 4 float values into xmm registers for output====================================================================================================================
   391 000001E3 C57D113424              vmovupd [rsp], ymm14
   392                                  
   393 000001E8 F20F100424              movsd xmm0, [rsp]
   394 000001ED 58                      pop rax
   395 000001EE F20F100C24              movsd xmm1, [rsp]
   396 000001F3 58                      pop rax
   397 000001F4 F20F101424              movsd xmm2, [rsp]
   398 000001F9 58                      pop rax
   399 000001FA F20F101C24              movsd xmm3, [rsp]
   400 000001FF 58                      pop rax
   401                                  
   402 00000200 B804000000              mov rax, 4			                            ;4 floating point numbers will be outputted
   403 00000205 48BF-                   mov rdi, outputamps
   404 00000207 [8E01000000000000] 
   405 0000020F E8(00000000)            call printf
   406                                  
   407                                  ;==== Compute total current in the circuit ================================================================================================================================
   408                                  
   409 00000214 C4410D7CEE              vhaddpd ymm13, ymm14, ymm14
   410 00000219 C4437D19EC01            vextractf128 xmm12, ymm13, 1
   411 0000021F F2450F58E5              addsd xmm12, xmm13
   412 00000224 C4417D10F4              vmovupd ymm14, ymm12
   413 00000229 F2410F10C6              movsd xmm0, xmm14
   414                                  
   415                                  
   416                                  ;==== Output the total current in entire circuit ==========================================================================================================================
   417                                  
   418 0000022E B801000000              mov        rax, 1                                           ;1 floating point numbers will be outputted
   419 00000233 48BF-                   mov        rdi, outputampstotal                             ;"Total current in the circuits is %1.18lf amps. "
   420 00000235 [C001000000000000] 
   421 0000023D E8(00000000)            call       printf                                           ;Call a library function to do the hard work
   422                                  
   423                                  
   424                                  ;==== compute total power in the circuit ==================================================================================================================================
   425 00000242 C441057CEF              vhaddpd ymm13, ymm15, ymm15				    ;add values within ymm15 together and store them in ymm13
   426 00000247 C4437D19EC01            vextractf128 xmm12, ymm13, 1				    ;extracts first two values from ymm13 and places them in xmm12
   427 0000024D F2450F58E5              addsd xmm12, xmm13					    ;adds values from xmm13 and xmm12 together and stores them into xmm12
   428 00000252 C4417D10FC              vmovupd ymm15, ymm12
   429 00000257 F2410F10C7              movsd xmm0, xmm15
   430                                  
   431                                  ;==== output the total power in the circuit ===============================================================================================================================
   432                                  
   433 0000025C B801000000              mov        rax, 1                                           ;1 floating point numbers will be outputted
   434 00000261 48BF-                   mov        rdi, outputwattstotal                            ;"Total power in the circuit is %1.18lf watts. "
   435 00000263 [F001000000000000] 
   436 0000026B E8(00000000)            call       printf                                           ;Call a library function to do the hard work
   437                                  
   438                                  ;===== Conclusion message =================================================================================================================================================
   439 00000270 6A00                    push qword 0     
   440 00000272 B800000000              mov qword  rax, 0                                           ;No data from SSE will be printed
   441 00000277 48BF-                   mov        rdi, stringformat                                ;"%s"
   442 00000279 [0B03000000000000] 
   443 00000281 48BE-                   mov        rsi, goodbye                                     ;"The analyzer program will now return the total power to the driver."
   444 00000283 [C402000000000000] 
   445 0000028B E8(00000000)            call       printf                                           ;Call a llibrary function to do the hard work.
   446 00000290 58                      pop        rax 
   447                                  ;===== Retrieve a copy of the quotient that was backed up earlier =========================================================================================================
   448                                  
   449 00000291 415F                    pop        r15                                              ;A copy of the quotient is in r14 (temporary storage)
   450                                  
   451                                  ;Now the stack is in the same state as when the application area was entered.  It is safe to leave this application area.
   452                                  
   453                                  
   454                                  ;==========================================================================================================================================================================
   455                                  ;===== Begin State Component Restore ======================================================================================================================================
   456                                  ;==========================================================================================================================================================================
   457                                  
   458                                  ;===== Check the flag to determine if state components were really backed up ==============================================================================================
   459                                  
   460 00000293 5B                      pop        rbx                                              ;Obtain a copy of the flag that indicates state component backup or not.
   461 00000294 4883FB00                cmp        rbx, 0                                           ;If there was no backup of state components then jump past the restore section.
   462 00000298 7426                    je         setreturnvalue                                   ;Go to set up the return value.
   463                                  
   464                                  ;Continue with restoration of state components;
   465                                  
   466                                  ;Precondition: edx:eax must hold the state component bitmap.  Therefore, go get a new copy of that bitmap.
   467                                  
   468                                  ;Preconditions for obtaining the bitmap from the cpuid instruction
   469 0000029A B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
   470 0000029F B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
   471                                  
   472                                  ;Call the function
   473 000002A4 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
   474                                  
   475                                  ;Postcondition: The bitmap in now in edx:eax
   476                                  
   477                                  ;Future insurance: Make sure the bitmap is limited to a maximum of 3 state components.
   478 000002A6 41BF07000000            mov        r15, 7
   479 000002AC 4C21F8                  and        rax, r15
   480 000002AF 41BF00000000            mov        r15, 0
   481 000002B5 4C21FA                  and        rdx, r15
   482                                  
   483 000002B8 0FAE2C25[00000000]      xrstor     [backuparea]
   484                                  
   485                                  ;==========================================================================================================================================================================
   486                                  ;===== End State Component Restore ========================================================================================================================================
   487                                  ;==========================================================================================================================================================================
   488                                  
   489                                  
   490                                  setreturnvalue: ;=========== Set the value to be returned to the caller ===================================================================================================
   491                                  
   492 000002C0 4157                    push       r15                                              ;r14 continues to hold the first computed floating point value.
   493 000002C2 F20F100424              movsd      xmm0, [rsp]                                      ;That first computed floating point value is copied to xmm0[63-0]
   494 000002C7 415F                    pop        r15                                              ;Reverse the push of two lines earlier.
   495                                  
   496                                  ;=========== Restore GPR values and return to the caller ==================================================================================================================
   497                                  
   498 000002C9 9D                      popf                                                        ;Restore rflags
   499 000002CA 415F                    pop        r15                                              ;Restore r15
   500 000002CC 415E                    pop        r14                                              ;Restore r14
   501 000002CE 415D                    pop        r13                                              ;Restore r13
   502 000002D0 415C                    pop        r12                                              ;Restore r12
   503 000002D2 415B                    pop        r11                                              ;Restore r11
   504 000002D4 415A                    pop        r10                                              ;Restore r10
   505 000002D6 4159                    pop        r9                                               ;Restore r9
   506 000002D8 4158                    pop        r8                                               ;Restore r8
   507 000002DA 5F                      pop        rdi                                              ;Restore rdi
   508 000002DB 5E                      pop        rsi                                              ;Restore rsi
   509 000002DC 5A                      pop        rdx                                              ;Restore rdx
   510 000002DD 59                      pop        rcx                                              ;Restore rcx
   511 000002DE 5B                      pop        rbx                                              ;Restore rbx
   512 000002DF 5D                      pop        rbp                                              ;Restore rbp
   513                                  
   514 000002E0 C3                      ret                                                         ;No parameter with this instruction.  This instruction will pop 8 bytes from
   515                                                                                              ;the integer stack, and jump to the address found on the stack.
   516                                  ;========== End of program electric-circuits.asm ==========================================================================================================================
   517                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
